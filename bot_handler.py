"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–∞ –¥–ª—è DocKitBot
"""

import os
from typing import Any, Dict, List

from loguru import logger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config import Config
from document_processor import DocumentProcessor
from file_handler import FileHandler


class BotHandler:
    def __init__(self):
        self.config = Config()
        self.document_processor = DocumentProcessor()
        self.file_handler = FileHandler()

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_sessions: Dict[int, Dict[str, Any]] = {}

    def _get_user_session(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'files': [],
                'processing': False,
                'last_message_id': None
            }
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            files_count = len(self.user_sessions[user_id]['files'])
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, "
                f"—Ñ–∞–π–ª–æ–≤: {files_count}")
        return self.user_sessions[user_id]

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        welcome_message = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DocKitBot, {username}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:

üìã **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, JPG, PNG) –∏ –∞—Ä—Ö–∏–≤—ã ZIP
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF
‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∞—Ä—Ö–∏–≤ —Å –æ–ø–∏—Å—å—é

üì§ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –∏ –æ–ø–∏—Å—å!

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ù–∞–∑—ã–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–î–æ–≥–æ–≤–æ—Ä ‚Ññ1 –æ—Ç 01.01.2025 –≥.")
‚Ä¢ –î–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "—Å—Ç—Ä. 1", "—Å—Ç—Ä. 2" –∏ —Ç.–¥.
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
        """

        await update.message.reply_text(
            welcome_message,
            parse_mode=ParseMode.MARKDOWN
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é DocKitBot**

üîÑ **–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –∏ –æ–ø–∏—Å—å

üìÅ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, JPEG, PNG
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF
‚Ä¢ –ê—Ä—Ö–∏–≤—ã: ZIP

üìù **–ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã:
  - "–ó–∞—è–≤–∫–∞ ‚Ññ11 –æ—Ç 11.11.2024 –≥..jpg"
  - "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ1 –æ—Ç 01.01.2025 –≥. —Å—Ç—Ä. 1.png"
  - "–ü–æ—á—Ç–æ–≤–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç—Ä–µ–∫ ‚Ññ423423422.jpeg"

üìÑ **–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**
–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é:
‚Ä¢ "—Å—Ç—Ä. 1", "—Å—Ç—Ä. 2" (—Ä—É—Å—Å–∫–∏–π)
‚Ä¢ "—Å. 1", "—Å. 2" (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
‚Ä¢ "page 1", "page 2" (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: 100MB
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ñ–∞–π–ª

üÜò **–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:**
–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–µ—à–µ–Ω–∏—è.
        """

        await update.message.reply_text(
            help_message,
            parse_mode=ParseMode.MARKDOWN
        )

    async def handle_process(
            self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /process - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º
        logger.info(f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(self.user_sessions)}")
        if user_id in self.user_sessions:
            files_count = len(self.user_sessions[user_id]['files'])
            logger.info(
                f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                f"—Ñ–∞–π–ª–æ–≤: {files_count}")
        else:
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        session = self._get_user_session(user_id)

        files_count = len(session['files'])
        logger.info(
            f"–ö–æ–º–∞–Ω–¥–∞ /process –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, "
            f"—Ñ–∞–π–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: {files_count}")

        if not session['files']:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã!"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å",
                                     callback_data="process_yes"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="process_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        def escape_markdown(text):
            return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')

        files_list = "\n".join(
            [f"‚Ä¢ {escape_markdown(os.path.basename(f))}" for f in session['files']])
        message_text = f"""
üìã **–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(session['files'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**

{files_list}

–ù–∞–∂–º–∏—Ç–µ "‚úÖ –î–∞, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        """

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            await update.message.reply_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
            try:
                await update.message.reply_text(
                    f"üìã –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(session['files'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n{files_list}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    reply_markup=reply_markup
                )
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ Markdown: {e2}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                                )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        session = self._get_user_session(user_id)

        if query.data == "process_yes":
            session['processing'] = True
            await self._process_user_files(update, context, user_id)
        elif query.data == "process_no":
            session['files'] = []
            session['processing'] = False
            await query.edit_message_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    async def _process_user_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self._get_user_session(user_id)

        if not session['files']:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        progress_message = await update.callback_query.edit_message_text(
            "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n\n"
            "‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"
        )

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            result = await self._process_files_with_progress(
                session['files'], user_id, progress_message
            )

            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self._send_processing_result(update, result, user_id)
            else:
                await progress_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}"
                )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await progress_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        finally:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            session['files'] = []
            session['processing'] = False

    async def _process_files_with_progress(self, files: List[str], user_id: int, progress_message) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        total_files = len(files)
        processed_files = []
        errors = []

        for i, file_path in enumerate(files, 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((i - 1) / total_files * 100)
                progress_bar = self._create_progress_bar(progress)

                await progress_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n\n"
                    f"üìÑ –§–∞–π–ª {i} –∏–∑ {total_files}: {os.path.basename(file_path)}\n"
                    f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                    f"{progress_bar}"
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                file_info = self.file_handler.get_file_info(file_path)
                processed_file = await self.document_processor._process_file(file_path, file_info)

                if processed_file:
                    processed_files.append(processed_file)
                else:
                    errors.append(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {os.path.basename(file_path)}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                errors.append(
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {os.path.basename(file_path)}: {str(e)}")

        if not processed_files:
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        final_files = await self.document_processor._group_and_merge_pages(processed_files)

        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_path = self.file_handler.create_archive(final_files, user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å—å
        inventory = self.document_processor._create_inventory(final_files)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.file_handler.cleanup_user_files(user_id)

        return {
            'success': True,
            'archive_path': archive_path,
            'inventory': inventory,
            'errors': errors
        }

    def _create_progress_bar(self, percentage: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        bar_length = 20
        filled_length = int(bar_length * percentage / 100)
        bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
        return f"[{bar}] {percentage}%"

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        session = self._get_user_session(user_id)
        document = update.message.document

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if document.file_size > self.config.MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {document.file_size / 1024 / 1024:.1f}MB"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        file_name = document.file_name.lower()
        file_ext = os.path.splitext(file_name)[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–¥–æ–∫—É–º–µ–Ω—Ç—ã + –∞—Ä—Ö–∏–≤—ã)
        supported_formats = self.config.SUPPORTED_DOCUMENT_FORMATS + \
            self.config.SUPPORTED_ARCHIVE_FORMATS

        if file_ext not in supported_formats:
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_formats)}"
            )
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = await self.file_handler.download_file(document, user_id)

            # –ï—Å–ª–∏ —ç—Ç–æ ZIP –∞—Ä—Ö–∏–≤, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
            if file_ext == '.zip':
                extracted_files = self.file_handler.extract_archive(
                    file_path, user_id)
                if extracted_files:
                    session['files'].extend(extracted_files)
                    files_count = len(extracted_files)
                    logger.info(
                        f"ZIP –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {files_count} —Ñ–∞–π–ª–æ–≤ "
                        f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    await update.message.reply_text(
                        "‚ö†Ô∏è ZIP –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.\n"
                        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.config.SUPPORTED_DOCUMENT_FORMATS)}"
                    )
                    return
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session['files'].append(file_path)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_ext == '.zip':
                total_files = len(session['files'])
                logger.info(
                    f"ZIP –∞—Ä—Ö–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                    f"{document.file_name}, –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
                status_message = (
                    f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {document.file_name}\n"
                    f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                )
            else:
                total_files = len(session['files'])
                logger.info(
                    f"–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                    f"{document.file_name}, –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
                status_message = (
                    f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω: {document.file_name}\n"
                    f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                )

            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(
                f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "
                f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤
                if file_ext == '.zip':
                    logger.info(
                        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ZIP –∞—Ä—Ö–∏–≤–∞ "
                        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    message = await update.message.reply_text(status_message)
                    session['last_message_id'] = message.message_id
                    logger.info(
                        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ZIP –∞—Ä—Ö–∏–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
                        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                elif (len(session['files']) == 1 or
                      not session.get('last_message_id')):
                    logger.info(
                        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    message = await update.message.reply_text(status_message)
                    session['last_message_id'] = message.message_id
                    logger.info(
                        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg_id = session['last_message_id']
                    logger.info(
                        f"–ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} "
                        f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    try:
                        await context.bot.edit_message_text(
                            status_message,
                            chat_id=user_id,
                            message_id=msg_id
                        )
                        logger.info(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        message = await update.message.reply_text(status_message)
                        session['last_message_id'] = message.message_id
                        logger.info(
                            f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ "
                            f"—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await update.message.reply_text("‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é")
                    logger.info(
                        f"–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e2:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        session = self._get_user_session(user_id)
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if photo.file_size > self.config.MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ: {photo.file_size / 1024 / 1024:.1f}MB"
            )
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = await self.file_handler.download_photo(photo, user_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session['files'].append(file_path)

            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            photo_status_message = (
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
                f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(session['files'])}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )

            try:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (len(session['files']) == 1 or
                    not session.get('last_message_id')):
                    message = await update.message.reply_text(photo_status_message)
                    session['last_message_id'] = message.message_id
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await context.bot.edit_message_text(
                            photo_status_message,
                            chat_id=user_id,
                            message_id=session['last_message_id']
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        message = await update.message.reply_text(photo_status_message)
                        session['last_message_id'] = message.message_id
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def _send_processing_result(self, update: Update, result: Dict[str, Any], user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å—å
            if result.get('inventory'):
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                inventory_text = result['inventory'].replace('_', '\\_').replace(
                    '*', '\\*').replace('[', '\\[').replace(']', '\\]')
                await update.callback_query.edit_message_text(
                    f"üìã **–û–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n\n{inventory_text}",
                    parse_mode=ParseMode.MARKDOWN
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            if result.get('archive_path'):
                with open(result['archive_path'], 'rb') as archive:
                    await update.callback_query.message.reply_document(
                        document=archive,
                        filename=f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–¥–æ–∫—É–º–µ–Ω—Ç—ã_{user_id}.zip",
                        caption="‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≤–∞—à –∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
            if result.get('errors'):
                error_report = "‚ö†Ô∏è **–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö:**\n\n"
                for error in result['errors']:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    safe_error = error.replace('_', '\\_').replace(
                        '*', '\\*').replace('[', '\\[').replace(']', '\\]')
                    error_report += f"‚Ä¢ {safe_error}\n"
                await update.callback_query.message.reply_text(
                    error_report,
                    parse_mode=ParseMode.MARKDOWN
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
